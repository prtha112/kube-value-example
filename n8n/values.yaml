log:
    level: info
    output:
        - console
image:
    repository: n8nio/n8n
    pullPolicy: IfNotPresent
    tag: ""
db:
    type: postgresdb
externalPostgresql:
    host: foobar-postgres.domain.com
    username: fk_n8n
    password: foobar-n8n-password-xxxxxxxxxxx
    database: n8n
externalRedis:
    host: foobar-redis.domain.com
nodes:
    # -- Enable built-in node functions (e.g., HTTP Request, Code Node, etc.)
    builtin:
        # -- Enable built-in modules for the Code node
        enabled: true
        modules:
            - cryto
            - fs
    # -- External npm packages to install and allow in the Code node
    external:
        reinstallMissingPackages: true
        packages:
            - lodash@4.17.21
            - moment@2.30.1
            - axios@1.6.7
            - uuid@9.0.1
            - validator@13.9.0
            - xml2js@0.4.23
            - js-yaml@4.1.0
            - csv-parse@5.4.0
    # -- Image for the init container to install npm packages
    initContainer:
        image:
            repository: node
            tag: 24-alpine
            pullPolicy: IfNotPresent
main:
    resources:
        requests:
            cpu: 500m
            memory: 512Mi
        limits:
            cpu: 1024m
            memory: 1024Mi
    extraEnvVars:
        DB_POSTGRESDB_SSL: "true"
        DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED: "false"
        DB_POSTGRESDB_SSL_MODE: require
        N8N_ENCRYPTION_KEY: foobar-encrytion-key-xxxxxxxxxxx
worker:
    mode: queue
    autoscaling:
        enabled: true
    waitMainNodeReady:
        enabled: true
    resources:
        requests:
            cpu: 500m
            memory: 512Mi
        limits:
            cpu: 1024m
            memory: 1024Mi
    extraEnvVars:
        DB_POSTGRESDB_SSL: "true"
        DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED: "false"
        DB_POSTGRESDB_SSL_MODE: require
        N8N_ENCRYPTION_KEY: foobar-encrytion-key-xxxxxxxxxxx
webhook:
    mode: queue
    url: https://n8n.xxxxxxx.co
    autoscaling:
        enabled: true
    waitMainNodeReady:
        enabled: true
    resources:
        requests:
            cpu: 500m
            memory: 512Mi
        limits:
            cpu: 1024m
            memory: 1024Mi
    extraEnvVars:
        DB_POSTGRESDB_SSL: "true"
        DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED: "false"
        DB_POSTGRESDB_SSL_MODE: require
        N8N_ENCRYPTION_KEY: foobar-encrytion-key-xxxxxxxxxxx
    mcp:
        enabled: true
        extraEnvVars:
            DB_POSTGRESDB_SSL: "true"
            DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED: "false"
            DB_POSTGRESDB_SSL_MODE: require
            N8N_ENCRYPTION_KEY: foobar-encrytion-key-xxxxxxxxxxx
        resources:
            requests:
                cpu: 500m
                memory: 512Mi
            limits:
                cpu: 1024m
                memory: 1024Mi
api:
    enabled: true
    path: /api
    swagger:
        enabled: true
ingress:
    enabled: true
    className: alb
    annotations:
        alb.ingress.kubernetes.io/load-balancer-name: foobar-n8n-alb
        alb.ingress.kubernetes.io/group.name: foobar-n8n-alb-group
        alb.ingress.kubernetes.io/healthcheck-path: /healthz
        alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/success-codes: 200-499
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/certificate-arn: arnxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    hosts:
        - host: n8n.xxxxxxx.co
          paths:
            - path: /
              pathType: Prefix